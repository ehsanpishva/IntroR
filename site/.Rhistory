rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
load("C:/Users/p70072451/Downloads/data_survey_edit.rdata")
load("data_survey_edit.rdata")
############################################################################
# frequency tables
# https://en.wikipedia.org/wiki/Frequency_distribution
table(dat$marital)
# barplots
# https://en.wikipedia.org/wiki/Bar_chart
barplot(table(dat$marital))
# note: might get the following error message when trying to create a plot:
#
# Error in plot.new() : figure margins too large
#
dev.off()
# this indicates that the size of the 'plotting device' is too small to
# accommodate the plot you are trying to create; this can happen more easily
# in RStudio because the pane for plots at the bottom right is a bit small; if
# this happen, you just have to make the size of the plotting pane larger
# problem: the x-axis labels might not all be visible
# make the axis labels perpendicular to the axes (for x and y)
barplot(table(dat$marital), las=2)
# problem: the x-axis labels might be too large to fit
# check default margins (order is: bottom, left, top, right)
par()$mar
# make the bottom margin larger (and reduce the top margin)
par(mar=c(9,4,4,2))
barplot(table(dat$marital), las=2)
par(mar=c(4,9,4,2))
barplot(table(dat$marital), horiz=TRUE, las=1)
help(par)
hist(dat$age)
# par() settings stay active for new plots, so close the plotting device
dev.off()
# in RStudio, can also click on 'Clear all Plots' (the broom symbol)
hist(dat$age)
# add an x-axis label, change the color of the bars, add a title
hist(dat$age, xlab="Age", col="gray", main="Histogram of Age")
# can adjust the x-axis and y-axis limits
hist(dat$age, xlab="Age", col="gray", main="Histogram of Age",
xlim=c(0,100), ylim=c(0,100))
# adjust the number of cells/bins
hist(dat$age, xlab="Age", col="gray", main="Histogram of Age")
hist(dat$age, xlab="Age", col="gray", main="Histogram of Age", breaks=5)
hist(dat$age, xlab="Age", col="gray", main="Histogram of Age", breaks=30)
colors()
# colors can also be specified as R (red), G (green), B (Blue) hex values
# (https://en.wikipedia.org/wiki/Hexadecimal) or in terms of RGB intensities,
# but note that (by default) the intensities need to be given on a 0-1 scale
# these three are the same
"skyblue"
"#87CEEB"
rgb(135/255, 206/255, 235/255)
col2rgb("skyblue")
# can convert these intensities to hex values
as.hexmode(c(135, 206, 235))
boxplot(dat$age)
boxplot(dat$age, ylab="Age", main="Boxplot of Age")
# kernel density estimate of a distribution
# https://en.wikipedia.org/wiki/Kernel_density_estimation
density(dat$age)
plot(density(dat$age))
# adjust the 'bandwidth' (values > 1 lead to more smoothness)
plot(density(dat$age, adjust=1.5), main="Distribution of Age")
# superimpose density on top of histogram
hist(dat$age, xlab="Age", col="gray", main="Histogram of Age",
xlim=c(0,100), freq=FALSE)
lines(density(dat$age, adjust=1.5), lwd=3)
plot(dat$pss, dat$posaff)
# note: if you get an error ("need finite 'xlim' values" or "'x' and 'y'
# lengths differ") then your dataset probably does not include the 'pss'
# and/or the 'posaff' variable we created earlier (in rode04)
# adjust some settings
plot(dat$pss, dat$posaff, xlab="Stress", ylab="Positive Affect",
main="Scatterplot of Stress versus Positive Affect",
pch=19, xlim=c(10,50), ylim=c(10,50), col="blue")
# read more about the possible values for 'pch'
help(points)
# distinguish two groups
ifelse(dat$smoke == "yes", "red", "blue")
plot(dat$pss, dat$posaff, xlab="Stress", ylab="Positive Affect",
main="Scatterplot of Stress versus Positive Affect",
pch=19, xlim=c(10,50), ylim=c(10,50),
col=ifelse(dat$smoke == "yes", "red", "blue"), cex=0.5)
# add a legend
legend("topright", legend=c("smoker","non-smoker"), col=c("red","blue"),
pch=c(19,19), inset=.02, cex=0.8)
res <- xyTable(dat$pss, dat$posaff)
res
plot(res$x, res$y, cex=res$number, pch=19, xlab="Stress", ylab="PA")
# make the point sizes a bit smaller
plot(res$x, res$y, cex=res$number*0.2, pch=19, xlab="Stress", ylab="PA")
plot(res$x, res$y, cex=sqrt(res$number)*0.4, pch=19, xlab="Stress", ylab="PA")
# another solution is to 'jitter' the points
head(dat$pss)
head(jitter(dat$pss))
plot(jitter(dat$pss), jitter(dat$posaff), xlab="Stress", ylab="PA", pch=19)
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19, cex=0.5)
# note: the jittering is random, so each time you rerun the command above, the
# plot will look (slightly) different; to make the look of the plot fully
# reproducible, we can set the 'seed' of the random number generator before
# creating the plot (the seed number is completely arbitrary)
set.seed(1234)
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19, cex=0.5)
if (!suppressWarnings(require(hexbin))) install.packages("hexbin")
# load the 'hexbin' package
library(hexbin)
# another way to deal with overlapping points: binning into hexagon cells
res <- hexbin(dat$pss, dat$posaff)
plot(res, xlab="Stress", ylab="Positive Affect")
# another possibility: using transparency ('alpha blending')
plot(dat$pss, dat$posaff, xlab="Stress", ylab="PA", pch=19)
# last number for rgb(): 0 = full transparency, 1 = no transparency
plot(dat$pss, dat$posaff, xlab="Stress", ylab="PA", pch=19, col=rgb(0,0,0,.2))
pdf("plot_stress_vs_posaff.pdf")
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19)
dev.off()
postscript("plot_stress_vs_posaff.eps")
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19)
dev.off()
png("plot_stress_vs_posaff.png")
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19)
dev.off()
png("plot_stress_vs_posaff.png", width=1000, height=800, pointsize=20)
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19)
dev.off()
tiff("plot_stress_vs_posaff.tiff", width=1000, height=800, pointsize=20)
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19)
dev.off()
jpeg("plot_stress_vs_posaff.jpg", width=1000, height=800, pointsize=20)
plot(jitter(dat$pss, amount=0.5), jitter(dat$posaff, amount=0.5),
xlab="Stress", ylab="Positive Affect", pch=19)
dev.off()
help(device)
############################################################################
# some advanced plotting
# load the 'MASS' package (comes with R, so no need to install it)
library(MASS)
# 2d kernel density estimation
# https://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation
res <- kde2d(dat$pss, dat$posaff)
# error: 'missing or infinite values in the data are not allowed'
tmp <- dat[c("pss","posaff")]
tmp <- na.omit(tmp)
res <- kde2d(tmp$pss, tmp$posaff, n=100)
res
# contour plots
# https://en.wikipedia.org/wiki/Contour_line
contour(res, xlab="Stress", ylab="PA")
contour(res, nlevels=14, xlab="Stress", ylab="PA")
# filled contour plots
filled.contour(res, xlab="Stress", ylab="PA")
filled.contour(res, color=topo.colors, xlab="Stress", ylab="PA")
filled.contour(res, color=gray.colors, xlab="Stress", ylab="PA")
filled.contour(res, color=terrain.colors, xlab="Stress", ylab="PA")
filled.contour(res, color=heat.colors, xlab="Stress", ylab="PA")
filled.contour(res, color=cm.colors, xlab="Stress", ylab="PA")
filled.contour(res, color=hcl.colors, xlab="Stress", ylab="PA")
# check if filled.contour() has a 'color' argument; what is going on here?
# install (if necessary) the 'viridis' package and load it
if (!suppressWarnings(require(viridis))) install.packages("viridis")
library(viridis)
# now we have even more color palettes
filled.contour(res, color=viridis, xlab="Stress", ylab="PA")
filled.contour(res, color=magma,   xlab="Stress", ylab="PA")
filled.contour(res, color=inferno, xlab="Stress", ylab="PA")
filled.contour(res, color=plasma,  xlab="Stress", ylab="PA")
filled.contour(res, color=cividis, xlab="Stress", ylab="PA")
help(viridis)
# a 3d perspective plot
persp(res, xlab="Stress", ylab="Positive Affect", zlab="Density")
persp(res, xlab="Stress", ylab="Positive Affect", zlab="Density",
col="gray80", border="gray50", ticktype="detailed",
theta=135, phi=25, shade=0.7, ltheta=60)
nrz <- nrow(res$z)
ncz <- ncol(res$z)
nbcol <- 100
color <- hcl.colors(nbcol)
zfacet <- res$z[-1, -1] + res$z[-1, -ncz] + res$z[-nrz, -1] + res$z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
persp(res, xlab="Stress", ylab="Positive Affect", zlab="Density",
col=color[facetcol], theta=135, phi=35, border="gray50")
# something really fancy
if (!suppressWarnings(require(plotly))) install.packages("plotly")
library(plotly)
add_surface(plot_ly(x = res$x, y = res$y, z = res$z))
